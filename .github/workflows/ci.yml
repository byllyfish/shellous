# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: ci

on:
  push:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.9, '3.10-dev' ]

    env:
      POETRY_RUN: python -m poetry run
      LOG_LEVEL: WARNING

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        # Install poetry and use it to install dependencies.
        python -m pip install poetry
        if [ "${{ matrix.python-version }}" = "3.10-dev" ]; then
            python -m poetry config experimental.new-installer false
        fi
        python -m poetry install --no-root --no-interaction
        if [ "${{ matrix.os }}" != "windows-latest" ]; then
            python -m poetry add uvloop
        fi
    - name: Lint
      run: |
        # Run flake8 and pylint.
        # stop the build if there are Python syntax errors or undefined names
        echo "flake8 preflight:" `$POETRY_RUN flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics`
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        echo "flake8 syntax check:" `$POETRY_RUN flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics`
        $POETRY_RUN pylint -v -r y -f colorized --fail-under 9.5 shellous
    - name: Run Tests
      run: |
        # Run pytest.
        $POETRY_RUN python -m pytest -vv -s --durations=20 --log-cli-level=DEBUG
    - name: Run Code Coverage (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Run coverage and upload report to codecov.
        $POETRY_RUN coverage run --source shellous -m pytest
        $POETRY_RUN codecov
      env:
        SHELLOUS_CODE_COVERAGE: 1
    - name: Run Tests with uvloop (Linux and MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        $POETRY_RUN python -m pytest -vv -s --log-cli-level=DEBUG
      env:
        SHELLOUS_LOOP_TYPE: "uvloop"
    - name: Run Tests with PidfdWatcher (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        $POETRY_RUN python -m pytest -vv -s --log-cli-level=$LOG_LEVEL
      env:
        SHELLOUS_CHILDWATCHER_TYPE: "pidfd"
    - name: Run Tests with SafeChildWatcher (Linux and MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        $POETRY_RUN python -m pytest -vv -s --log-cli-level=$LOG_LEVEL
      env:
        SHELLOUS_CHILDWATCHER_TYPE: "safe"
    - name: Run Tests with MultiLoopChildWatcher (Linux and MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        $POETRY_RUN python -m pytest -vv -s --log-cli-level=$LOG_LEVEL
      env:
        SHELLOUS_CHILDWATCHER_TYPE: "multi"
      continue-on-error: true  # not confident yet
    - name: Run Tests with FastChildWatcher (Linux and MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        $POETRY_RUN python -m pytest -vv -s --log-cli-level=DEBUG
      env:
        SHELLOUS_CHILDWATCHER_TYPE: "fast"
      continue-on-error: true  # FastChildWatcher is unreliable
